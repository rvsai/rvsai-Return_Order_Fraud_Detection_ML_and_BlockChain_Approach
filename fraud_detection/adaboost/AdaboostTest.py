import numpy as npimport pandas as pdfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_reportimport matplotlib.pyplot as pltimport seaborn as snsimport joblib# Load the trained AdaBoost modeladaboost_model = joblib.load('adaboost_model.joblib')# Load the preprocessed test dataX_test = pd.read_csv('./data_70F_30NF/X_test.csv').values  # Convert to numpy array if not alreadyy_test = pd.read_csv('./data_70F_30NF/y_test.csv').values.flatten()  # Convert to 1D array if necessary# Make predictionsy_pred = adaboost_model.predict(X_test)# Evaluate the modelaccuracy = accuracy_score(y_test, y_pred)conf_matrix = confusion_matrix(y_test, y_pred)class_report = classification_report(y_test, y_pred)# Print evaluation metricsprint(f"Accuracy: {accuracy}")print("Confusion Matrix:")print(conf_matrix)print("Classification Report:")print(class_report)# Visualization of the confusion matrix#plt.figure(figsize=(8, 6))#sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Fraud', 'Fraud'], yticklabels=['Non-Fraud', 'Fraud'])#plt.xlabel('Predicted')#plt.ylabel('Actual')#plt.title('Confusion Matrix')#plt.show()# Feature importance visualization (optional)#feature_importances = adaboost_model.feature_importances_##plt.figure(figsize=(10, 6))#plt.bar(range(len(feature_importances)), feature_importances)#plt.xlabel('Feature Index')#plt.ylabel('Importance')#plt.title('Feature Importances from AdaBoost')#plt.show()