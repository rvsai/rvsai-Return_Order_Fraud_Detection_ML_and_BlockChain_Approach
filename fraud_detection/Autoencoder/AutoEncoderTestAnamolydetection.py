import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom tensorflow.keras.models import load_modeldef load_data(file_path):    """ Load the test data """    data = pd.read_csv(file_path).values    return data.reshape((-1, data.shape[1], 1))  # Reshape data for the autoencoderdef predict_reconstruction_error(model, data):    """ Predict data using autoencoder and calculate the mean squared error """    predictions = model.predict(data)    predictions = predictions.reshape((-1, data.shape[1], 1))  # Ensure shape matches for MSE calculation    mse = np.mean(np.power(data - predictions, 2), axis=1)    return msedef calculate_threshold(mse_values, percentile=95):    """ Calculate the threshold for anomaly detection based on the given percentile """    threshold = np.percentile(mse_values, percentile)    return thresholddef detect_anomalies(mse_values, threshold):    """ Detect anomalies based on the MSE threshold """    anomalies = mse_values > threshold    return anomaliesdef plot_results(mse_values, threshold):    """ Plot the MSE values and the calculated threshold """    plt.figure(figsize=(10, 6))    plt.hist(mse_values, bins=50, alpha=0.75, color='blue', label='MSE values')    plt.axvline(threshold, color='red', linestyle='dashed', linewidth=2, label='Threshold for anomalies')    plt.title('Histogram of MSE values with Anomaly Threshold')    plt.xlabel('Mean Squared Error (MSE)')    plt.ylabel('Frequency')    plt.legend()    plt.show()def main():    # Load test data    X_test = load_data('./data/X_test.csv')        # Load the pre-trained autoencoder model    model = load_model('autoencoder_model.h5')        # Calculate reconstruction errors    mse = predict_reconstruction_error(model, X_test)        # Calculate the threshold for anomaly detection    threshold = calculate_threshold(mse)    print(f"Anomaly Detection Threshold: {threshold}")    # Detect anomalies in the data    anomalies = detect_anomalies(mse, threshold)    print(f"Number of anomalies detected: {np.sum(anomalies)}")    print(f"Indices of anomalies: {np.where(anomalies)[0]}")    # Plot the results for visualization    plot_results(mse, threshold)if __name__ == "__main__":    main()